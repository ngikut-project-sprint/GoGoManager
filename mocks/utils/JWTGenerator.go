// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// JWTGenerator is an autogenerated mock type for the JWTGenerator type
type JWTGenerator struct {
	mock.Mock
}

type JWTGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *JWTGenerator) EXPECT() *JWTGenerator_Expecter {
	return &JWTGenerator_Expecter{mock: &_m.Mock}
}

// GenerateJWT provides a mock function with given fields: secret, id, email
func (_m *JWTGenerator) GenerateJWT(secret string, id int, email string) (string, error) {
	ret := _m.Called(secret, id, email)

	if len(ret) == 0 {
		panic("no return value specified for GenerateJWT")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, string) (string, error)); ok {
		return rf(secret, id, email)
	}
	if rf, ok := ret.Get(0).(func(string, int, string) string); ok {
		r0 = rf(secret, id, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, int, string) error); ok {
		r1 = rf(secret, id, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JWTGenerator_GenerateJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateJWT'
type JWTGenerator_GenerateJWT_Call struct {
	*mock.Call
}

// GenerateJWT is a helper method to define mock.On call
//   - secret string
//   - id int
//   - email string
func (_e *JWTGenerator_Expecter) GenerateJWT(secret interface{}, id interface{}, email interface{}) *JWTGenerator_GenerateJWT_Call {
	return &JWTGenerator_GenerateJWT_Call{Call: _e.mock.On("GenerateJWT", secret, id, email)}
}

func (_c *JWTGenerator_GenerateJWT_Call) Run(run func(secret string, id int, email string)) *JWTGenerator_GenerateJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *JWTGenerator_GenerateJWT_Call) Return(_a0 string, _a1 error) *JWTGenerator_GenerateJWT_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JWTGenerator_GenerateJWT_Call) RunAndReturn(run func(string, int, string) (string, error)) *JWTGenerator_GenerateJWT_Call {
	_c.Call.Return(run)
	return _c
}

// NewJWTGenerator creates a new instance of JWTGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJWTGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *JWTGenerator {
	mock := &JWTGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

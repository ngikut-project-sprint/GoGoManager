// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"
)

// JWTHandler is an autogenerated mock type for the JWTHandler type
type JWTHandler struct {
	mock.Mock
}

type JWTHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *JWTHandler) EXPECT() *JWTHandler_Expecter {
	return &JWTHandler_Expecter{mock: &_m.Mock}
}

// GenerateJWT provides a mock function with given fields: secret, id, email
func (_m *JWTHandler) GenerateJWT(secret string, id int, email string) (string, error) {
	ret := _m.Called(secret, id, email)

	if len(ret) == 0 {
		panic("no return value specified for GenerateJWT")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, string) (string, error)); ok {
		return rf(secret, id, email)
	}
	if rf, ok := ret.Get(0).(func(string, int, string) string); ok {
		r0 = rf(secret, id, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, int, string) error); ok {
		r1 = rf(secret, id, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JWTHandler_GenerateJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateJWT'
type JWTHandler_GenerateJWT_Call struct {
	*mock.Call
}

// GenerateJWT is a helper method to define mock.On call
//   - secret string
//   - id int
//   - email string
func (_e *JWTHandler_Expecter) GenerateJWT(secret interface{}, id interface{}, email interface{}) *JWTHandler_GenerateJWT_Call {
	return &JWTHandler_GenerateJWT_Call{Call: _e.mock.On("GenerateJWT", secret, id, email)}
}

func (_c *JWTHandler_GenerateJWT_Call) Run(run func(secret string, id int, email string)) *JWTHandler_GenerateJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *JWTHandler_GenerateJWT_Call) Return(_a0 string, _a1 error) *JWTHandler_GenerateJWT_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JWTHandler_GenerateJWT_Call) RunAndReturn(run func(string, int, string) (string, error)) *JWTHandler_GenerateJWT_Call {
	_c.Call.Return(run)
	return _c
}

// ParseWithClaims provides a mock function with given fields: tokenString, claims, keyFunc, options
func (_m *JWTHandler) ParseWithClaims(tokenString string, claims jwt.Claims, keyFunc jwt.Keyfunc, options ...jwt.ParserOption) (*jwt.Token, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, tokenString, claims, keyFunc)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ParseWithClaims")
	}

	var r0 *jwt.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(string, jwt.Claims, jwt.Keyfunc, ...jwt.ParserOption) (*jwt.Token, error)); ok {
		return rf(tokenString, claims, keyFunc, options...)
	}
	if rf, ok := ret.Get(0).(func(string, jwt.Claims, jwt.Keyfunc, ...jwt.ParserOption) *jwt.Token); ok {
		r0 = rf(tokenString, claims, keyFunc, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(string, jwt.Claims, jwt.Keyfunc, ...jwt.ParserOption) error); ok {
		r1 = rf(tokenString, claims, keyFunc, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JWTHandler_ParseWithClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseWithClaims'
type JWTHandler_ParseWithClaims_Call struct {
	*mock.Call
}

// ParseWithClaims is a helper method to define mock.On call
//   - tokenString string
//   - claims jwt.Claims
//   - keyFunc jwt.Keyfunc
//   - options ...jwt.ParserOption
func (_e *JWTHandler_Expecter) ParseWithClaims(tokenString interface{}, claims interface{}, keyFunc interface{}, options ...interface{}) *JWTHandler_ParseWithClaims_Call {
	return &JWTHandler_ParseWithClaims_Call{Call: _e.mock.On("ParseWithClaims",
		append([]interface{}{tokenString, claims, keyFunc}, options...)...)}
}

func (_c *JWTHandler_ParseWithClaims_Call) Run(run func(tokenString string, claims jwt.Claims, keyFunc jwt.Keyfunc, options ...jwt.ParserOption)) *JWTHandler_ParseWithClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]jwt.ParserOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(jwt.ParserOption)
			}
		}
		run(args[0].(string), args[1].(jwt.Claims), args[2].(jwt.Keyfunc), variadicArgs...)
	})
	return _c
}

func (_c *JWTHandler_ParseWithClaims_Call) Return(_a0 *jwt.Token, _a1 error) *JWTHandler_ParseWithClaims_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JWTHandler_ParseWithClaims_Call) RunAndReturn(run func(string, jwt.Claims, jwt.Keyfunc, ...jwt.ParserOption) (*jwt.Token, error)) *JWTHandler_ParseWithClaims_Call {
	_c.Call.Return(run)
	return _c
}

// NewJWTHandler creates a new instance of JWTHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJWTHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *JWTHandler {
	mock := &JWTHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

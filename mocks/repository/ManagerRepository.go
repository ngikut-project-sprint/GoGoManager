// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	models "github.com/ngikut-project-sprint/GoGoManager/internal/models"
	mock "github.com/stretchr/testify/mock"

	utils "github.com/ngikut-project-sprint/GoGoManager/internal/utils"
)

// ManagerRepository is an autogenerated mock type for the ManagerRepository type
type ManagerRepository struct {
	mock.Mock
}

type ManagerRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ManagerRepository) EXPECT() *ManagerRepository_Expecter {
	return &ManagerRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: email, password
func (_m *ManagerRepository) Create(email string, password string) (int, *utils.GoGoError) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int
	var r1 *utils.GoGoError
	if rf, ok := ret.Get(0).(func(string, string) (int, *utils.GoGoError)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, string) *utils.GoGoError); ok {
		r1 = rf(email, password)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.GoGoError)
		}
	}

	return r0, r1
}

// ManagerRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ManagerRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - email string
//   - password string
func (_e *ManagerRepository_Expecter) Create(email interface{}, password interface{}) *ManagerRepository_Create_Call {
	return &ManagerRepository_Create_Call{Call: _e.mock.On("Create", email, password)}
}

func (_c *ManagerRepository_Create_Call) Run(run func(email string, password string)) *ManagerRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ManagerRepository_Create_Call) Return(_a0 int, _a1 *utils.GoGoError) *ManagerRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ManagerRepository_Create_Call) RunAndReturn(run func(string, string) (int, *utils.GoGoError)) *ManagerRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with no fields
func (_m *ManagerRepository) GetAll() ([]models.Manager, *utils.GoGoError) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.Manager
	var r1 *utils.GoGoError
	if rf, ok := ret.Get(0).(func() ([]models.Manager, *utils.GoGoError)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Manager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Manager)
		}
	}

	if rf, ok := ret.Get(1).(func() *utils.GoGoError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.GoGoError)
		}
	}

	return r0, r1
}

// ManagerRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type ManagerRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *ManagerRepository_Expecter) GetAll() *ManagerRepository_GetAll_Call {
	return &ManagerRepository_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *ManagerRepository_GetAll_Call) Run(run func()) *ManagerRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ManagerRepository_GetAll_Call) Return(_a0 []models.Manager, _a1 *utils.GoGoError) *ManagerRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ManagerRepository_GetAll_Call) RunAndReturn(run func() ([]models.Manager, *utils.GoGoError)) *ManagerRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: email
func (_m *ManagerRepository) GetByEmail(email string) (*models.Manager, *utils.GoGoError) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *models.Manager
	var r1 *utils.GoGoError
	if rf, ok := ret.Get(0).(func(string) (*models.Manager, *utils.GoGoError)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Manager); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Manager)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *utils.GoGoError); ok {
		r1 = rf(email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.GoGoError)
		}
	}

	return r0, r1
}

// ManagerRepository_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type ManagerRepository_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - email string
func (_e *ManagerRepository_Expecter) GetByEmail(email interface{}) *ManagerRepository_GetByEmail_Call {
	return &ManagerRepository_GetByEmail_Call{Call: _e.mock.On("GetByEmail", email)}
}

func (_c *ManagerRepository_GetByEmail_Call) Run(run func(email string)) *ManagerRepository_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ManagerRepository_GetByEmail_Call) Return(_a0 *models.Manager, _a1 *utils.GoGoError) *ManagerRepository_GetByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ManagerRepository_GetByEmail_Call) RunAndReturn(run func(string) (*models.Manager, *utils.GoGoError)) *ManagerRepository_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: id
func (_m *ManagerRepository) GetByID(id int) (*models.Manager, *utils.GoGoError) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Manager
	var r1 *utils.GoGoError
	if rf, ok := ret.Get(0).(func(int) (*models.Manager, *utils.GoGoError)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.Manager); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Manager)
		}
	}

	if rf, ok := ret.Get(1).(func(int) *utils.GoGoError); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.GoGoError)
		}
	}

	return r0, r1
}

// ManagerRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ManagerRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id int
func (_e *ManagerRepository_Expecter) GetByID(id interface{}) *ManagerRepository_GetByID_Call {
	return &ManagerRepository_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *ManagerRepository_GetByID_Call) Run(run func(id int)) *ManagerRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *ManagerRepository_GetByID_Call) Return(_a0 *models.Manager, _a1 *utils.GoGoError) *ManagerRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ManagerRepository_GetByID_Call) RunAndReturn(run func(int) (*models.Manager, *utils.GoGoError)) *ManagerRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: manager
func (_m *ManagerRepository) Update(manager *models.Manager) *utils.GoGoError {
	ret := _m.Called(manager)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *utils.GoGoError
	if rf, ok := ret.Get(0).(func(*models.Manager) *utils.GoGoError); ok {
		r0 = rf(manager)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.GoGoError)
		}
	}

	return r0
}

// ManagerRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ManagerRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - manager *models.Manager
func (_e *ManagerRepository_Expecter) Update(manager interface{}) *ManagerRepository_Update_Call {
	return &ManagerRepository_Update_Call{Call: _e.mock.On("Update", manager)}
}

func (_c *ManagerRepository_Update_Call) Run(run func(manager *models.Manager)) *ManagerRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Manager))
	})
	return _c
}

func (_c *ManagerRepository_Update_Call) Return(_a0 *utils.GoGoError) *ManagerRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ManagerRepository_Update_Call) RunAndReturn(run func(*models.Manager) *utils.GoGoError) *ManagerRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewManagerRepository creates a new instance of ManagerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManagerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ManagerRepository {
	mock := &ManagerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

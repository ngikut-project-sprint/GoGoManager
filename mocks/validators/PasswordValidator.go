// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PasswordValidator is an autogenerated mock type for the PasswordValidator type
type PasswordValidator struct {
	mock.Mock
}

type PasswordValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *PasswordValidator) EXPECT() *PasswordValidator_Expecter {
	return &PasswordValidator_Expecter{mock: &_m.Mock}
}

// ValidatePassword provides a mock function with given fields: password, min, max
func (_m *PasswordValidator) ValidatePassword(password string, min int, max int) error {
	ret := _m.Called(password, min, max)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int, int) error); ok {
		r0 = rf(password, min, max)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PasswordValidator_ValidatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatePassword'
type PasswordValidator_ValidatePassword_Call struct {
	*mock.Call
}

// ValidatePassword is a helper method to define mock.On call
//   - password string
//   - min int
//   - max int
func (_e *PasswordValidator_Expecter) ValidatePassword(password interface{}, min interface{}, max interface{}) *PasswordValidator_ValidatePassword_Call {
	return &PasswordValidator_ValidatePassword_Call{Call: _e.mock.On("ValidatePassword", password, min, max)}
}

func (_c *PasswordValidator_ValidatePassword_Call) Run(run func(password string, min int, max int)) *PasswordValidator_ValidatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *PasswordValidator_ValidatePassword_Call) Return(_a0 error) *PasswordValidator_ValidatePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PasswordValidator_ValidatePassword_Call) RunAndReturn(run func(string, int, int) error) *PasswordValidator_ValidatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewPasswordValidator creates a new instance of PasswordValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPasswordValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *PasswordValidator {
	mock := &PasswordValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
